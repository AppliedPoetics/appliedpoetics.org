<!DOCTYPE html>
    <head>
        <!-- BOOTSTRAP -->
            <!-- Latest compiled and minified CSS -->
            <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
            <!-- jQuery library -->
            <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
            <!-- Latest compiled JavaScript -->
            <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
        <!-- BOOTSTRAP -->
        <!-- TYPEKIT -->
            <script src="https://use.typekit.net/vwg0vgf.js"></script>
            <script>try{Typekit.load({ async: true });}catch(e){}</script>
        <!-- TYPEKIT -->
        <!-- STYLESHEET -->
            <link rel="stylesheet" href = "css/style.css">
        <!-- STYLESHEET -->
        <!-- JAVASCRIPT -->
            <script src = "js/ui-functions.js"></script>
            <script src = "js/menu-functions.js"></script>
            <script src = "js/line-numbers.js"></script>
            <script src = "js/app-router.js"></script>
        <!-- JAVASCTIPT -->
        <!-- META -->
        <title>Applied Poetics: 
        <?php 
            $git_head = file('.git/HEAD',FILE_USE_INCLUDE_PATH);
            $date_mod = filemtime(".");
            echo explode("/",$git_head[0])[2]." ".date("y.m.d:Hi", $date_mod);
        ?>
        </title>
        <!-- META -->
    </head>
    <body>
        <div id = "wrapper">
            <div id = "menu">
                <nav>
                    <div id = "option-container">
                        <div class = "dropdown" tabindex = "0" id = "oulipo">
                            <button class = "drop-btn">Oulipean</button>
                            <div class = "dropdown-content" id = "oulipo-menu">
                                <a href = "#" id = "tautogram" data-toggle="popover" data-html="true" title = "Tautogram" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><div class = 'styled-select'><select name = 'param' id = 'param'><option value = 'a'>a</option><option value = 'b'>b</option><option value = 'c'>c</option><option value = 'd'>d</option><option value = 'e'>e</option><option value = 'f'>f</option><option value = 'g'>g</option><option value = 'h'>h</option><option value = 'i'>i</option><option value ='j'>j</option><option value = 'k'>k</option><option value = 'l'>l</option><option value = 'm'>m</option><option value = 'n'>n</option><option value = 'o'>o</option><option value = 'p'>p</option><option value = 'q'>q</option><option value = 'r'>r</option><option value = 's'>s</option><option value = 't'>t</option><option value = 'u'>u</option><option value= 'v'>v</option><option value = 'w'>w</option><option value = 'x'>x</option><option value = 'y'>y</option><option value='z'>z</option></select></div><input type = 'hidden' name = 'cmd' value = 'tautogram' id = 'cmd'><input type ='Submit' value = 'Run'><div class = 'tool-explain'>The tautogram is a constraint which sorts out all words beginning with a selected letter.</div></form>">Tautogram</a>
                                <a href = "#" id = "lipogram" data-toggle="popover" data-html="true" title = "Lipogram" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><div class = 'styled-select'><select name = 'param' id = 'param'><option value = 'a'>a</option><option value = 'b'>b</option><option value = 'c'>c</option><option value = 'd'>d</option><option value = 'e'>e</option><option value = 'f'>f</option><option value = 'g'>g</option><option value = 'h'>h</option><option value = 'i'>i</option><option value ='j'>j</option><option value = 'k'>k</option><option value = 'l'>l</option><option value = 'm'>m</option><option value = 'n'>n</option><option value = 'o'>o</option><option value = 'p'>p</option><option value = 'q'>q</option><option value = 'r'>r</option><option value = 's'>s</option><option value = 't'>t</option><option value = 'u'>u</option><option value= 'v'>v</option><option value = 'w'>w</option><option value = 'x'>x</option><option value = 'y'>y</option><option value='z'>z</option></select></div><input type = 'hidden' name = 'cmd' value = 'lipogram' id = 'cmd'><input type ='Submit' value = 'Run'><div class = 'tool-explain'>Somewhat the opposite of a tautogram, the lipogram is a constraint which erases all words from a text that contain a selected letter.</div></form>">Lipogram</a>
                                <a href = "#" id = "homoconsonant" data-toggle="popover" data-html="true" title = "Homoconsonantism" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><input type = 'hidden' name = 'cmd' value = 'homoconsonant' id = 'cmd'><input type ='Submit' value = 'Run'><div class = 'tool-explain'>Ever wondered what a text would look like without vowels? Here's your chance.</div></form>">Homoconsonantism</a>
                                <a href = "#" id "fibonnaci" data-toggle="popover" data-html="true" title = "Fibonacci Seq." data-content = "<form onsubmit = 'return processForm(this)' action = '#'><input type = 'hidden' name = 'cmd' value = 'fibonacci' id = 'cmd'><input type ='Submit' value = 'Run'><div class = 'tool-explain'>This generator reads through a text picking out words of a text correlating to the procession of the Fibonacci Sequence. For example, the beginning of the sequence returns the first (1), first, (1), second (2), then fifth (5) words and continues through the text following the Fibonacci pattern.</div></form>">Fibonnaci Seq.</a>
                                <a href = "#" id = "prisoners" data-toggle="popover" data-html="true" title = "Prisoner's Constraint" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><input type = 'hidden' name = 'cmd' value = 'prisoners' id = 'cmd'><input type ='Submit' value = 'Run'><div class = 'tool-explain'>Imagine you are a prisoner who is attempting to write letters to the outside conserving both ink and paper. To do so, you would write only the letters which take the smallest amount of space—those without ascenders or descenders (such as j, h, t, et al.). This generator removes all words which contain the offending letters.</div></form>">Prisoner's Constraint</a>
                                <a href = "#" id = 'belleabsente' data-toggle="popover" data-html="true" title = "Belle Absente" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><input type = 'text' autocomplete = 'off' id = 'param'><input type = 'hidden' name = 'cmd' value = 'absente' id = 'cmd'><input type ='Submit' value = 'Run'><div class = 'tool-explain'>The Belle Absente, or 'Absent Beloved' is a constraint in which words featuring letters in a selected name or phrase are removed from the text. Terms and letters should not be comma separated.</div></form>">Belle Absente</a>
                                <a href = "#" id = "beaupresente" data-toggle="popover" data-html="true" title = "Beau Presente" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><input type = 'text' autocomplete = 'off' id = 'param'><input type = 'hidden' name = 'cmd' value = 'presente' id = 'cmd'><input type ='Submit' value = 'Run'><div class = 'tool-explain'>O, happy day—the beloved has returned! This constraint is one in which words can only be made up of letters in a given name or phrase. Terms and letters should not be comma separated.</div></form>">Beau Presente</a>
                                <a href = "#" id = "univocalism" data-toggle="popover" data-html="true" title = "Univocalism" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><div class = 'styled-select'><select name = 'param' id = 'param'><option value = 'a'>a</option><option value = 'e'>e</option><option value = 'i'>i</option><option value = 'o'>o</option><option value = 'u'>u</option></select></div><input type = 'hidden' name = 'cmd' value = 'univocalism' id = 'cmd'><input type ='Submit' value = 'Run'><div class = 'tool-explain'>Returns only words containing a selected vowel. If selecting 'I', words such as 'big' or 'bin' would appear; selecting 'O' would mean words such as 'bone' or 'boat' would not be allowed, but 'bog' would.</div></form>">Univocalism</a>
                                <a href = "#" id = "snowball" data-toggle="popover" data-html="true" title = "Snowball" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><div class = 'styled-select'><select name = 'param' id = 'param'><option value = 'true'>Melt</option><option value = 'false'>Freeze</option></select></div><input type = 'hidden' name = 'cmd' value = 'snowball' id = 'cmd'><input type ='Submit' value = 'Run'><div class = 'tool-explain'>Sorts words in a text by length returning the list in descending order (melt) or ascending order (freeze).</div></form>">Snowball</a>
                            </div>
                        </div>
                        <div class = "dropdown" tabindex = "0">
                            <button class = "drop-btn">Grammar/Syntax</button>
                            <div class = "dropdown-content" id = "grammar-menu">
                                <a href = "#" id = "punctuator" data-toggle="popover" data-html="true" title = "Punctuator" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><input type = 'hidden' name = 'cmd' value = 'punctuator' id = 'cmd'><input type ='Submit' value = 'Run'><div class = 'tool-explain'>Removes all words from a text, leaving only the punctuation behind, preserving the text's original spacing.</div></form>">Punctuator</a>
                                <a href = "#" id = "isolate" data-toggle="popover" data-html="true" title = "Isolate Sentence" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><div class = 'styled-select'><select name = 'punct' id = 'param'><option value = '!'>!</option><option value = '?'>?</option><option value = '.'>.</option></select></div><input type = 'hidden' name = 'cmd' value = 'isolate' id = 'cmd'><input type ='Submit' value = 'Run'><div class = 'tool-explain'>Returns only sentences that end with a punctuation mark of your choosing.</div></form>">Isolate Sentences</a>
                                <a href = "#" id = "quotation" data-toggle="popover" data-html="true" title = "Quotes" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><input type = 'hidden' name = 'cmd' value = 'quotes' id = 'cmd'><input type ='Submit' value = 'Run'><div class = 'tool-explain'>Returns all quoted material from the source text.</div></form>">Quotations</a>
                                <a href = "#" id = "partsofspeech" data-toggle="popover" data-html="true" title = "Parts of Speech" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><div class = 'styled-select'><select name = 'param' id = 'param'><option value = 'JJ'>Adjectives</option><option value = 'RB'>Adverbs</option><option value = 'FW'>Foreign Words</option><option value = 'NN'>Nouns</option><option value = 'VB'>Verbs</option></select></div><input type = 'hidden' name = 'cmd' value = 'partsofspeech' id = 'cmd'><input type ='Submit' value = 'Run'><div class = 'tool-explain'>All words classified as a given part of speech are filtered and returned. This is an implementation of the Penn Treebank from the Python NLTK toolkit. There may be a short lag time between submission of the request and results.</div></form>">Parts of Speech</a>
                                <a href = "#" id = "concordance" data-toggle="popover" data-html="true" title = "Concordance" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><label># words before/after:</label><input type = 'text' autocomplete = 'off' id = 'granular' onkeypress='return event.charCode >= 48 && event.charCode <= 57 || event.charCode == 8 || event.charCode == 46'><br/><br/><label>Word(s) to search:</label><input type = 'text' autocomplete = 'off' id = 'param'><input type = 'hidden' name = 'cmd' value = 'concordance' id = 'cmd'><input type ='Submit' value = 'Run'><div class = 'tool-explain'>Though not a true substitute for a concordance, this function will search for a word in a text and pull the corresponding number of words specified on either side of it.</div></form>">Concordance</a>
                                <!--<a href = "#" id = "regex" data-toggle="popover" data-html="true" title = "Regular Expr." data-content = "<form onsubmit = 'return processForm(this)' action = '#'><input type = 'hidden' name = 'cmd' value = 'regexp' id = 'cmd'><input type = 'text' autocomplete = 'off' id = 'param'><input type ='Submit' value = 'Run'><div class = 'tool-explain'>Enter any regular expression to search a text and return all matches. This requires some knowledge of programmable 'regular expressions.'</div></form>">Regular Expr.</a>-->
                                <a href = "#" id = "abecedarian" data-toggle="popover" data-html="true" title = "Abecedarian" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><input type = 'hidden' name = 'cmd' value = 'abecedarian' id = 'cmd'><input type ='Submit' value = 'Run'><div class = 'tool-explain'>Searches a text for the first word matching each letter of the alphabet, continuing from the position that the last letter was found.</div></form>">Abecedarian</a>
                                <a href = "#" id = "abcquence" data-toggle="popover" data-html="true" title = "ABC-quence" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><input type = 'hidden' name = 'cmd' value = 'alphabetron' id = 'cmd'><input type ='Submit' value = 'Run'><div class = 'tool-explain'>Discovers all the words in a text spelt from letters which appear in alphabetical order such as 'effort' or 'abbey'.</div></form>">ABC-quence</a>
                                <a href = "#" id = "chainreaction" data-toggle="popover" data-html="true" title = "Chain Reaction" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><input type = 'hidden' name = 'cmd' value = 'chainreaction' id = 'cmd'><input type ='Submit' value = 'Run'><div class = 'tool-explain'>Grabs the first word in a text, using the last letter to find the next consecutive word starting with that letter, using that word's last letter to continue the search.</div></form>">Chain Reaction</a>
                                <a href = "#" data-toggle="popover" data-html="true" title = "Anagram" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><input type = 'hidden' name = 'cmd' value = 'permutations' id = 'cmd'><input type ='Submit' value = 'Run'><div class = 'tool-explain'>Attempts a best-fit anagram for the given text. As of yet, it's imperfect, but it's getting better.</div></form>">Anagram</a>
                                <a href = "#" id = "synonymizer" data-toggle="popover" data-html="true" title = "Synonymizer" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><input type = 'hidden' name = 'cmd' value = 'synant' id = 'cmd'><input type ='Submit' value = 'Run'><div class = 'tool-explain'>Searches a predefined dictionary for synonyms of all words 3 characters and greater, substituting a random synonym from a contextual list.</div></form>">Synonymizer</a>
                                <a href = "#" id = "alternator" data-toggle="popover" data-html="true" title = "Alternator" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><div class = 'styled-select'><select name = 'param' id = 'param'><option value = 'c'>Consonant-Vowel</option><option value = 'v'>Vowel-Consonant</option></select></div><input type = 'hidden' name = 'cmd' value = 'alternator' id = 'cmd'><input type ='Submit' value = 'Run'><div class = 'tool-explain'>Search for words which have alternating patterns of consonants and vowels, such as 'bones' or 'agog'.</div></form>">Alternator</a>
                                <a href = "#" id = "hexwords" data-toggle="popover" data-html="true" title = "Hexwords" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><input type = 'hidden' name = 'cmd' value = 'hexwords' id = 'cmd'><input type ='Submit' value = 'Run'><div class = 'tool-explain'>This generator translates your text into spellings which only contain characters in the base 16 alphabet (0-9, a-f). Routine is adapted from code written by Ned Batchelder.</div></form>">Hexwords</a>
                                <a href = "#" id = "homophonic" data-toggle="popover" data-html="true" title = "Homophonic Translation" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><div class = 'styled-select'><select name = 'param' id = 'param'><option value = 'translate'>Translate</option><option value = 'phonics'>Phonics Only</option></select></div><input type = 'hidden' name = 'cmd' value = 'homophonic' id = 'cmd'><input type ='Submit' value = 'Run'><div class = 'tool-explain'>Performs a homophonic, phoetic translation of a text. While the routine can sample entire pages, it's probably best to do it a poem/paragraph at a time.</div></form>">Homophonic Translation</a>
                            </div>
                        </div>
                        <div class = "dropdown" tabindex = "0">
                            <button class = "drop-btn">Algorithmic</button>
                            <div class = "dropdown-content" id = "algo-menu">
                                <a href = "#" id = "travesty" data-toggle="popover" data-html="true" title = "Travesty" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><label># of chars. to output</label><input type = 'text' autocomplete = 'off' id = 'outwords' onkeypress='restrictNumberKeys(this)'><br/><br/><label>Granularity</label><input type = 'text' autocomplete = 'off' id = 'granular' onkeypress='restrictNumberKeys(this)'><input type = 'hidden' name = 'cmd' value = 'travesty' id = 'cmd'><input type ='Submit' value = 'Run'><br/><div class = 'tool-explain'>Travesty is a tool which examines a text's letter frequency and returns a scrambled version of the original. Granularity is the number of words to use as a model. This is a slightly modified version of the PERL Travesty script by Ron Starr.</div></form>">Travesty</a>
                                <a href = "#" id = "markov" data-toggle="popover" data-html="true" title = "Markov" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><label># of chars. to output</label><input type = 'text' autocomplete = 'off' id = 'outwords' onkeypress='restrictNumberKeys(this)'><br/><br/><label>Granularity</label><input type = 'text' autocomplete = 'off' id = 'granular' onkeypress='restrictNumberKeys(this)'><input type = 'hidden' name = 'cmd' value = 'markov' id = 'cmd'><input type ='Submit' value = 'Run'><br/><div class = 'tool-explain'>The Markov utility is a tool which examines a text's word frequency and returns a scrambled version of the original. Granularity is the number of words to use as a model. Higher numbers generate relatlively bettter fluency.</div></form>">Markov</a>
                                <a href = "#" id = "proofofwork" data-toggle="popover" data-html="true" title = "Proof of Work" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><input type = 'hidden' name = 'cmd' value = 'proofofwork' id = 'cmd'><input type ='Submit' value = 'Run'><br/><div class = 'tool-explain'>Inspired by Bitcoin and Hashcash transactions, this routine 'solves' each line of a poem as if part of a transaction, providing each line's solution to the challenge issued by the line through a SHA256 hash.</div></form>">Proof of Work</a>
                                <a href = "#" id = "blockchain" data-toggle="popover" data-html="true" title = "Blockchain" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><input type = 'hidden' name = 'cmd' value = 'blockchain' id = 'cmd'><input type ='Submit' value = 'Run'><br/><div class = 'tool-explain'>Another routine sourced from the mechanics of Bitcoin, the 'Blockchain' generator encodes a text in a SHA256 hash ready for transmission/insertion into a real blockchain.</div></form>">Blockchain</a>
                                <a href = "#" id = "colorfield" data-toggle="popover" data-html="true" title = "Color Field" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><input type = 'hidden' name = 'cmd' value = 'colorfield' id = 'cmd'><input id='filename' placeholder='Choose file.' disabled='disabled' /><div class = 'fileupload btn btn-primary'>Choose Image<input type = 'file' class = 'upload' id = 'uploadbtn' accept = 'image/*' /></div><br/><br/><div class = 'styled-select'><select name = 'param' id = 'param'><option value = 'sentences'>Containing</option><option value = 'letters'>Spelled By</option><option value = 'anagrams'>Anagrams</option><option value = 'list'>List Colors</option></select></div><hr/><input type ='Submit' value = 'Run'><br/><div class = 'tool-explain'>'Color Field' scans through an uploaded image to find all of the distinct colors present.<br/><Br/> The 'Containing' option pulls out sentences containing colors found in that image; the 'Spelled By' image finds all words spelled from the letters which make up these colors. 'Anagram' returns anagrams of the web-safe color names contained in the image. 'List Colors' simply lists web-safe colors in the image.</div></form>">Color Field</a>
                                <a href = "#" id = "editdistance" data-toggle="popover" data-html="true" title = "Edit Distance" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><label>Enter a maximum edit distance:</label><input type = 'text' autocomplete = 'off' id = 'param' onkeypress='restrictNumberKeys(this)' placeholder = '3' maxlength=20><input type = 'hidden' name = 'cmd' value = 'levdistance' id = 'cmd'><input type ='Submit' value = 'Run'><br/><div class = 'tool-explain'>Returns all words in a text within a given Levenshtein distance or 'edit distance.' The default is 3 edits.</div></form>">Edit Distance</a>
                            </div>
                        </div>
                        <div tabindex = "0" class = "dropdown">
                            <button class = "drop-btn">Formic</button>
                            <div class = "dropdown-content" id = "form-menu">
                                <a href = "#" id = "sestina" data-toggle="popover" data-html="true" title = "Sestina" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><input type = 'hidden' name = 'cmd' value = 'sestina' id = 'cmd'><input type ='Submit' value = 'Run'><div class = 'tool-explain'>Creates a random sestina from a given text.</div></form>">Sestina</a>
                            </div>
                        </div>
                        <div tabindex = "0" class = "dropdown">
                            <button class = "drop-btn">Numerology</button>
                            <div class = "dropdown-content" id = "number-menu">
                                <a href = "#" id = "nthword" data-toggle="popover" data-html="true" title = "N<sup>th</sup> Word" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><label>N<sup>TH</SUP> word to take:</label><input type = 'text' autocomplete = 'off' id = 'param' onkeypress='restrictNumberKeys(this)'><input type = 'hidden' name = 'cmd' value = 'nthword' id = 'cmd'><input type ='Submit' value = 'Run'><div class = 'tool-explain'>Begins counting from the start of a text and takes every n<sup>th</sup> word. For example, entering '9' takes the 9<sup>th</sup>, 18<sup>th</sup>, 27<sup>th</sup> word, continuing until the entire text has been read.</div></form>">Nth Word</a>
                                <a href = "#" id = "pithon" data-toggle="popover" data-html="true" title = "Pi-thon" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><input type = 'hidden' name = 'cmd' value = 'pi' id = 'cmd'><input type ='Submit' value = 'Run'><div class = 'tool-explain'>Calculates π to the number of decimals as there are words in the text, starting from the first digit of π, taking the third word, then the first after that, then the fourth, and so on.</div></form>">Pi-thon</a>
                                <a href = "#" id = "atlength" data-toggle="popover" data-html="true" title = "At Length" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><label># of letters:</label><input type = 'text' autocomplete = 'off' id = 'param' onkeypress='restrictNumberKeys(this)'><br/><input type = 'hidden' name = 'cmd' value = 'strlen' id = 'cmd'><input type ='Submit' value = 'Run'><div class = 'tool-explain'>Searches for words of a given length, retrieving only words of that number of letters.</div></form>">At Length</a>
                                <a href = "#" id = "birthdate" data-toggle="popover" data-html="true" title = "Birthdate" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><label>Enter a date:</label><input type = 'date' id = 'param' onkeypress='restrictNumberKeys(this)' placeholder = 'MM/DD/YYYY'><input type = 'hidden' name = 'cmd' value = 'birthdate' id = 'cmd'><input type ='Submit' value = 'Run'><div class = 'tool-explain'>Enter a date in MM/DD/YYYY format.</div></form>">Birthdate</a>
                                <a href = "#" id = "phonewords" data-toggle="popover" data-html="true" title = "Phonewords" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><label>Input digits to 'spell' (up to 7 without dashes):</label><input type = 'tel' id = 'param' onkeypress='restrictNumberKeys(this)' placeholder = '8675309' maxlength=7><input type = 'hidden' name = 'cmd' value = 'tollfree' id = 'cmd'><input type ='Submit' value = 'Run'><div class = 'tool-explain'>'Spells' through a text using the part of an American toll-free number usually reserved to spell phrases such as '1800ireallyenjoycarpeting'—except that's too many letters, man.</div></form>">Phonewords</a>
                                <a href = "#" id = "dialatext" data-toggle="popover" data-html="true" title = "Dial-a-Text" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><label>Input a phone number (without dashes):</label><input type = 'tel' id = 'param' onkeypress='restrictNumberKeys(this)' placeholder = '5558675309' maxlength=20><input type = 'hidden' name = 'cmd' value = 'dialer' id = 'cmd'><input type ='Submit' value = 'Run'><div class = 'tool-explain'>Cycles through a text picking out words which match the 'n<sup>th</sup>' position. For example, '8675309' would look for word 8, 6, 7, 5 and so on.</div></form>">Dial-a-Text</a>
                            </div>
                        </div>
                        <div class = "dropdown"tabindex = "0">
                            <button class = "drop-btn">Pop Culture</button>
                            <div class = "dropdown-content" id = "pop-menu">
                                <a href = "#" id = "powerball" data-toggle="popover" data-html="true" title = "Powerball" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><label>The latest numbers are:</label><div id = 'powerball_numbers' class = 'numbers'></div><input type = 'hidden' name = 'cmd' value = 'powerball' id = 'cmd'><input type ='Submit' value = 'Run'><div class = 'tool-explain'>This routine uses the latest Powerball numbers to read a text, taking each non-Powerball number as the n<sup>th</sup> number in the text, cycling once it reaches the end of the sequence, with the Powerball as the title. The latest numbers are courtesy of the New York state lottery API.</div></form>" onclick = "javascript: powerball();">Powerball</a>
                                <a href = "#" id = "lost" data-toggle="popover" data-html="true" title = "The LOST Numbers" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><label>The Numbers are unlucky.</label><br/><div class = 'numbers'>4 8 15 16 23 42</div><input type = 'hidden' name = 'cmd' value = 'lost' id = 'cmd'><input type ='Submit' value = 'Run'><div class = 'tool-explain'>This function cycles through the text taking each subsequent n<sup>th</sup> word, and making a text. While these numbers only brought misfortune to the characters in the television show LOST, may you find poetry through them.</div></form>">The LOST Numbers</a>
                                <a href = "#" id = "weather" data-toggle="popover" data-html="true" title = "Weather Forecast" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><input type = 'hidden' name = 'cmd' value = 'weather' id = 'cmd'><input type ='Submit' value = 'Run'><div class = 'tool-explain'>Using a predefined (and periodically updated) list of weather-related terms, the 'Weather Forecast' searches a text for these terms, returning full sentences containing them.</div></form>">Weather Forecast</a>
                                <a href = "#" id = "coloring" data-toggle="popover" data-html="true" title = "Coloring Book" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><input type = 'hidden' name = 'cmd' value = 'color' id = 'cmd'><input type ='Submit' value = 'Run'><div class = 'tool-explain'>Using a predefined (and periodically updated) list of names for colors, the 'Coloring Book' function retrieves all sentences containing colors.</div></form>">Coloring Book</a>
                                <a href = "#" id = "sartorialize" data-toggle="popover" data-html="true" title = "Sartorializer" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><input type = 'hidden' name = 'cmd' value = 'fashion' id = 'cmd'><input type ='Submit' value = 'Run'><div class = 'tool-explain'>Using a predefined (and periodically updated) list of fashion terms, the 'Sartorializer' function retrieves all sentences containing terms related to dress and clothing.</div></form>">Sartorializer</a>
                            </div>
                        </div>
                        <div class = "dropdown" tabindex = "0">
                            <button class = "drop-btn">Statistics</button>
                            <div class = "dropdown-content" id = "stat-menu">
                                <a href = "#" id = "wordCount">Word Count</a>
                                <a href = "#" id = "charCount">Char. Count</a>
                                <!--<a href = "#" id = "lineCount">Line Count</a>-->
                            </div>
                        </div>
                        <div class = "dropdown" tabindex = "0">
                            <button class = "drop-btn file-opts">Text Ops.</button>
                            <div class = "dropdown-content" id = 'text-menu'>
                            <a class = "file-opts" id = "clear" href = '#' data-toggle = "popover" data-html = "true" title = "Really Clear Screen?" data-content = "<form onsubmit = 'return clearScreen()'><input type = 'Submit' value = 'Clear Screen'><div class = 'tool-explain'></div></form>"style = "width: inherit;">Clear Screen</a>
                            <a class = "file-opts" id = "dedupe" href = "#" data-toggle="popover" data-html="true" title = "De-duplicate" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><input type = 'hidden' name = 'cmd' value = 'dedupe' id = 'cmd'><input type ='Submit' value = 'Run'><div class = 'tool-explain'>Removes duplicate words from a text or list.</div></form>">De-duplicate</a>
                            <a class = "file-opts" id = "sort" href = "#" data-toggle="popover" data-html="true" title = "Sort List" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><div class = 'styled-select'><select name = 'param' id = 'param'><option value = 'asc'>Ascending</option><option value = 'desc'>Descending</option></select></div><input type = 'hidden' name = 'cmd' value = 'listsort' id = 'cmd'><input type ='Submit' value = 'Run'><div class = 'tool-explain'>Sort a list or text in ascending or descending alphabetical order.</div></form>">Sort List</a>
                            <a class = "file-opts" id = "unique" href = "#" data-toggle="popover" data-html="true" title = "List Unique Letters" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><input type = 'hidden' name = 'cmd' value = 'listchars' id = 'cmd'><input type ='Submit' value = 'Run'><div class = 'tool-explain'>Returns a string containing list of unique letters in a text.</div></form>">Unique Letters</a>
                            <a class = "file-opts" id = "reverse" href = "#" data-toggle="popover" data-html="true" title = "Reverse Text" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><input type = 'hidden' name = 'cmd' value = 'reverser' id = 'cmd'><input type ='Submit' value = 'Run'><div class = 'tool-explain'>Reverses the entire text.</div></form>">Reverse Text</a>
                            <a class = "file-opts" id = "default" href = "#" data-toggle="popover" data-html="true" title = "Default Text" data-content = "<form onsubmit = 'return loadText()' action = '#'><input type = 'hidden' name = 'cmd' value = 'defaulttext' id = 'cmd'><input type ='Submit' value = 'Run'><div class = 'tool-explain'>Don't have a text in mind? Use one of our favorites: Robert Louis Stevenson's <i>The Strange Case of Dr. Jekyll and Mr. Hyde</i>.</div></form>">Default Text</a>
                            <a class = "file-opts" href = "#" id = "wiki" data-toggle="popover" data-html="true" title = "Wikipedia" data-content = "<form onsubmit = 'return processForm(this)' action = '#'><input type = 'hidden' name = 'cmd' value = 'wiki' id = 'cmd'><input type = 'text' autocomplete = 'off' id = 'param' placeholder = 'Article topic'><br/><br/><div class = 'styled-select'><select name = 'word' id = 'word'><option value = 'single'>Single Topic Page</option><option value = 'pageref'>Page + Linked Topics</option><option value = 'refonly'>Only Linked Topics</option><option value = 'list'>List Topics Only</option></select></div><hr/><input type ='Submit' value = 'Run'><div class = 'tool-explain'>Fetches a Wikipedia page and (optionally) all of its references as a source text. Depending on how many links there are in the topic, this can take a fair amount of time.</div></form>">Wikipedia</a>
                            </div>
                        </div>
                        <div class = "dropdown" tabindex = "0">
                            <button class = "drop-btn file-opts" id = 'login-btn' data-toggle="modal" data-target="#loginModal" name = 'login-btn'>Log In</button>
                        </div>
                        <div class = "dropdown" tabindex = "0">
                            <button class = "drop-btn file-opts" onclick = 'location.href="/labreports";'>LAB REPORTS</button>
                        </div>
                    </div>
                </nav>
            </div>
            <div id = "console">
                <form>
                    <textarea name = "editContent" id = "editContent" rel = "popover"></textarea>
                </form>
                <script type="text/javascript">
                    createTextAreaWithLines('editContent');
                    $("#lineNumbers").prop("disabled", true);
                </script>
            </div>
        </div>
        <script>
            $(window).resize(function() {
                createTextAreaWithLines('editContent');
            });
        </script>
        <div id = "loading"><img src = 'img/ap-type-loading.gif' width="101" height="159"></div>
    </body>
</html>
